package controller

import (
	"fmt"

	"strconv"

	"github.com/gin-gonic/gin"
	"stylrax.com/account-mgmt/src/helper/httpHandler"
	"stylrax.com/account-mgmt/src/model"
	"stylrax.com/account-mgmt/src/service"
	vm "stylrax.com/account-mgmt/src/viewModel"
)

type CouponCtrl interface {
	GetCoupons(c *gin.Context)
	GetCouponById(c *gin.Context)
	UpdateCoupon(c *gin.Context)
	CreateCoupon(c *gin.Context)
	DeleteCoupon(c *gin.Context)
}

type couponCtrl struct {
	coupon service.CouponService
}

func NewCouponCtrl(couponService service.CouponService) CouponCtrl {
	return &couponCtrl{
		coupon: couponService,
	}
}

// get all Service categories
func (cp *couponCtrl) GetCoupons(c *gin.Context) {
	coupons, err := cp.coupon.GetCoupons()
	if err != nil {
		httpHandler.New(c).BadRequest(err.Error())
		return
	}
	httpHandler.New(c).Success("OK", coupons)
}

// get coupon by id
func (cp *couponCtrl) GetCouponById(c *gin.Context) {
	// Assuming 'id' is a positive integer
	couponID, err := strconv.ParseUint(c.Param("couponId"), 10, 64)
	if err != nil {
		httpHandler.New(c).BadRequest("Invalid category ID")
		return
	}
	category, err := cp.coupon.GetCouponById(uint(couponID))
	if err != nil {
		httpHandler.New(c).BadRequest(err.Error())
		return
	}
	httpHandler.New(c).Success("OK", category)

}

// update Service categories by id
func (cp *couponCtrl) UpdateCoupon(c *gin.Context) {
	categoryID, err := strconv.ParseUint(c.Param("couponId"), 10, 64)
	if err != nil {
		httpHandler.New(c).BadRequest("Invalid coupon ID")
		return
	}
	// Retrieve the updated data from the request body
	var updatedData vm.CouponEntity
	if err := c.ShouldBindJSON(&updatedData); err != nil {
		httpHandler.New(c).BadRequest("Invalid request body")
		return
	}
	// Call the service to update the category
	updatedCoupon, err := cp.coupon.UpdateCoupon(uint(categoryID), updatedData)
	if err != nil {
		httpHandler.New(c).BadRequest(err.Error())
		return
	}
	httpHandler.New(c).Success("Coupon updated successfully", updatedCoupon)
}

// create  Coupon
func (cp *couponCtrl) CreateCoupon(c *gin.Context) {
	currentUser := c.MustGet("currentUser").(model.TokenClaim)
	fmt.Println("current user", currentUser)
	var createRequest vm.CouponEntity
	// Bind the JSON request body to the createRequest struct
	if err := c.ShouldBindJSON(&createRequest); err != nil {
		httpHandler.New(c).BadRequest("Invalid request body")
		return
	}
	createdCategory, err := cp.coupon.CreateCoupon(createRequest)
	if err != nil {
		httpHandler.New(c).BadRequest(err.Error())
		return
	}
	httpHandler.New(c).Success("Coupon created successfully", createdCategory)
}

// delete  Service category
func (cp *couponCtrl) DeleteCoupon(c *gin.Context) {
	categoryID, err := strconv.ParseUint(c.Param("couponId"), 10, 64)
	fmt.Println("id", categoryID)
	if err != nil {
		httpHandler.New(c).BadRequest("Invalid category ID")
		return
	}

	err = cp.coupon.DeleteCoupon(uint(categoryID))
	if err != nil {
		httpHandler.New(c).InternalServerError("Failed to delete sCoupon: " + err.Error())
		return
	}

	httpHandler.New(c).Success("Coupon deleted successfully")
}


package model

import (
	"time"

	vm "stylrax.com/account-mgmt/src/viewModel"
)

type Coupon struct {
	ID              uint `gorm:"primarykey"`
	Name            string
	Details         string
	Description     string
	DiscountDetails string
	CreatedBy       string
	StartDate       time.Time
	EndDate         time.Time
	ImageUrl        string
	IsActive        bool
	IsDeleted       bool
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (cp Coupon) ToEntity() vm.CouponEntity {
	return vm.CouponEntity{
		ID:              cp.ID,
		Name:            cp.Name,
		Details:         cp.Details,
		Description:     cp.Description,
		DiscountDetails: cp.DiscountDetails,
		StartDate:       cp.StartDate,
		EndDate:         cp.EndDate,
		ImageUrl:        cp.ImageUrl,
		IsActive:        cp.IsActive,
		IsDeleted:       cp.IsDeleted,
		CreatedBy:       cp.CreatedBy,
		CreatedAt:       cp.CreatedAt,
		UpdatedAt:       cp.UpdatedAt,
	}
}

func (cp Coupon) FromEntity(entity vm.CouponEntity) interface{} {

	return Coupon{
		ID:              entity.ID,
		Name:            entity.Name,
		Details:         entity.Details,
		Description:     entity.Description,
		DiscountDetails: entity.DiscountDetails,
		CreatedBy:       entity.CreatedBy,
		ImageUrl:        entity.ImageUrl,
		StartDate:       entity.StartDate,
		EndDate:         entity.EndDate,
		IsActive:        entity.IsActive,
		IsDeleted:       entity.IsDeleted,
	}
}

package repository

import (
	"gorm.io/gorm"
	"stylrax.com/account-mgmt/src/model"
)

type CouponRepo interface {
	GetCoupons() ([]model.Coupon, error)
	GetCouponById(id uint) (*model.Coupon, error)
	UpdateCoupon(coupon *model.Coupon) (*model.Coupon, error)
	CreateCoupon(createRequest *model.Coupon) error
	DeleteCoupon(id uint) error
	GetCouponByName(name string) (*model.Coupon, error)
}

type couponRepo struct {
	DB *gorm.DB
}

func NewCouponRepo(DB *gorm.DB) CouponRepo {
	return &couponRepo{
		DB: DB,
	}
}

// get all Service categories
func (cp *couponRepo) GetCoupons() ([]model.Coupon, error) {
	var coupons []model.Coupon
	err := cp.DB.Find(&coupons).Error
	return coupons, err
}

// get Service  category by id
func (cp *couponRepo) GetCouponById(id uint) (*model.Coupon, error) {
	var category model.Coupon
	err := cp.DB.Where("id = ?", id).First(&category).Error
	return &category, err
}

// update Service category by id
func (cp *couponRepo) UpdateCoupon(coupon *model.Coupon) (*model.Coupon, error) {
	err := cp.DB.Save(coupon).Error
	if err != nil {
		return nil, err
	}
	return coupon, nil
}

// create Service category service
func (cp *couponRepo) CreateCoupon(createRequest *model.Coupon) error {
	err := cp.DB.Create(createRequest).Error
	return err

}

func (cp *couponRepo) GetCouponByName(name string) (*model.Coupon, error) {
	var category model.Coupon
	err := cp.DB.Where("name = ?", name).First(&category).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}
	return &category, err
}

func (cp *couponRepo) DeleteCoupon(id uint) error {
	err := cp.DB.Delete(&model.Coupon{}, id).Error
	return err
}


package router

import (
	"github.com/gin-gonic/gin"
	"stylrax.com/account-mgmt/src/controller"
	"stylrax.com/account-mgmt/src/middleware"
)

type CouponRouter interface {
	Routes(router *gin.Engine)
}

type couponRouter struct {
	couponCtrl controller.CouponCtrl
}

func NewCouponRouter(couponCtrl controller.CouponCtrl) CouponRouter {
	return &couponRouter{
		couponCtrl: couponCtrl,
	}
}

func (cp *couponRouter) Routes(router *gin.Engine) {

	// Below APIs are for admin only
	adminCouponsAPIs := router.Group("/admin/coupon")
	{
		adminCouponsAPIs.Use(middleware.DeserializeUser())

		adminCouponsAPIs.GET("/", cp.couponCtrl.GetCoupons)
		adminCouponsAPIs.POST("/", cp.couponCtrl.CreateCoupon)
		adminCouponsAPIs.GET("/:couponId", cp.couponCtrl.GetCouponById)
		adminCouponsAPIs.PUT("/:couponId", cp.couponCtrl.UpdateCoupon)
		adminCouponsAPIs.DELETE("/:couponId", cp.couponCtrl.DeleteCoupon)

	}
}
package service

import (
	"gorm.io/gorm"
	"stylrax.com/account-mgmt/src/helper/errors"
	"stylrax.com/account-mgmt/src/model"

	"stylrax.com/account-mgmt/src/repository"
	vm "stylrax.com/account-mgmt/src/viewModel"
)

type CouponService interface {
	GetCoupons() ([]vm.CouponEntity, error)
	GetCouponById(id uint) (*vm.CouponEntity, error)
	UpdateCoupon(id uint, updatedData vm.CouponEntity) (*vm.CouponEntity, error)
	CreateCoupon(createRequest vm.CouponEntity) (vm.CouponEntity, error)
	DeleteCoupon(id uint) error
}

type couponService struct {
	couponRepo repository.CouponRepo
}

func NewCouponService(couponRepo repository.CouponRepo) CouponService {
	return &couponService{
		couponRepo: couponRepo,
	}
}

// get all Service categories lists
func (cp *couponService) GetCoupons() ([]vm.CouponEntity, error) {
	var categories = make([]vm.CouponEntity, 0)
	_categories, err := cp.couponRepo.GetCoupons()
	if err != nil {
		return categories, errors.NewAppError("Failed to fetch categories")
	}
	for _, category := range _categories {
		categories = append(categories, category.ToEntity())
	}
	return categories, nil
}

// get  Service categories list by id

func (cp *couponService) GetCouponById(id uint) (*vm.CouponEntity, error) {
	category, err := cp.couponRepo.GetCouponById(id)
	if err != nil {
		return nil, errors.NewAppError("Record not found")
	}
	// Convert the model.Coupon to CouponEntity using the ToEntity method
	categoryEntity := category.ToEntity()

	return &categoryEntity, nil
}

// update Service category by id

func (cp *couponService) UpdateCoupon(id uint, updatedData vm.CouponEntity) (*vm.CouponEntity, error) {
	// Retrieve the existing category
	existingCoupon, err := cp.couponRepo.GetCouponById(id)
	if err != nil {
		return nil, errors.NewAppError("Record not found")
	}

	// Check if the updated name is different from the existing name
	if updatedData.Name != existingCoupon.Name {
		// Check if the updated name already exists
		if _, err := cp.couponRepo.GetCouponByName(updatedData.Name); err != nil {
			if err != gorm.ErrRecordNotFound {
				return nil, errors.NewAppError("Failed to check existing category: " + err.Error())
			}
		} else {
			// The updated name already exists, return an error
			return nil, errors.NewAppError("Coupon name already exists")
		}
	}

	existingCoupon.Name = updatedData.Name
	existingCoupon.ImageUrl = updatedData.ImageUrl
	existingCoupon.Description = updatedData.Description
	existingCoupon.Details = updatedData.Details
	existingCoupon.DiscountDetails = updatedData.DiscountDetails
	existingCoupon.StartDate = updatedData.StartDate
	existingCoupon.EndDate = updatedData.EndDate

	result, err := cp.couponRepo.UpdateCoupon(existingCoupon)
	if err != nil {
		return nil, errors.NewAppError("Failed to update ccoupon")
	}

	// Convert the saved category to CouponEntity
	updatedCoupon := result.ToEntity()

	return &updatedCoupon, nil
}

// create service category
func (cp *couponService) CreateCoupon(createRequest vm.CouponEntity) (vm.CouponEntity, error) {
	// Check if the category name already exists
	_, err := cp.couponRepo.GetCouponByName(createRequest.Name)
	if err == nil {
		return createRequest, errors.NewAppError("Coupon name already exists")
	}

	// Create a new category
	var newCoupon model.Coupon

	newCoupon = newCoupon.FromEntity(createRequest).(model.Coupon)

	// Save the new category
	err = cp.couponRepo.CreateCoupon(&newCoupon)
	if err != nil {
		return createRequest, errors.NewAppError("Failed to create coupon: " + err.Error())
	}

	createRequest.ID = newCoupon.ID
	return createRequest, nil
}

// delete Service category
func (cp *couponService) DeleteCoupon(id uint) error {
	err := cp.couponRepo.DeleteCoupon(id)
	if err != nil {
		return errors.NewAppError("Failed to delete coupon")
	}
	return nil
}
package viewmodel

import "time"

type CouponEntity struct {
	ID              uint      `gorm:"primarykey"`
	Name            string    `json:"name"`
	Details         string    `json:"details"`
	Description     string    `json:"description"`
	DiscountDetails string    `json:"discountDetails"`
	StartDate       time.Time `json:"startDate"`
	EndDate         time.Time `json:"endDate"`
	ImageUrl        string    `json:"imageUrl"`
	CreatedBy       string    `json:"createdBy"`
	IsActive        bool      `json:"isActive"`
	IsDeleted       bool      `json:"isDeleted"`
	CreatedAt       time.Time `json:"createAt"`
	UpdatedAt       time.Time `json:"updatedAt"`
}
package main

import (
	"context"
	"log"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	ginadapter "github.com/awslabs/aws-lambda-go-api-proxy/gin"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"stylrax.com/account-mgmt/src/controller"
	"stylrax.com/account-mgmt/src/initializers"
	"stylrax.com/account-mgmt/src/repository"
	"stylrax.com/account-mgmt/src/router"
	"stylrax.com/account-mgmt/src/service"
)

var (
	ginLambda *ginadapter.GinLambda
	r         *gin.Engine

	ServiceCategoryRepo repository.ServiceCategoryRepo
	AdvertisementRepo   repository.AdvertisementRepo

	ServiceCategoryService service.ServiceCategoryService
	AdvertisementService   service.AdvertisementService

	ServiceCategoryCtrl controller.ServiceCategoryCtrl
	AdvertisementCtrl   controller.AdvertisementCtrl

	ServiceCategoryRouter router.ServiceCategoryRouter
	AdvertisementRouter   router.AdvertisementRouter
)

func main() {
	if env := os.Getenv("GO_ENV"); env != "dev" {
		lambda.Start(Handler)
	} else {
		r.Run(":8000")
	}

}

func init() {

	if env := os.Getenv("GO_ENV"); env == "dev" {
		err := godotenv.Load(".env")
		if err != nil {
			log.Fatal("Error loading .env file")
		}
	}

	config := initializers.NewDbConfig()
	initializers.ConnectDB(config)
	r = gin.New()

	// Enable CORS with custom configuration
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowAllOrigins = true
	r.Use(cors.New(corsConfig))

	ServiceCategoryRepo = repository.NewServiceCategoryRepo(initializers.DB)
	AdvertisementRepo = repository.NewAdvertisementRepo(initializers.DB)

	ServiceCategoryService = service.NewServiceCategoryService(ServiceCategoryRepo)
	AdvertisementService = service.NewAdvertisementService(AdvertisementRepo)

	ServiceCategoryCtrl = controller.NewServiceCategoryCtrl(ServiceCategoryService)
	AdvertisementCtrl = controller.NewAdvertisementCtrl(AdvertisementService)

	ServiceCategoryRouter = router.NewServiceCategoryRouter(ServiceCategoryCtrl)
	AdvertisementRouter = router.NewAdvertisementRouter(AdvertisementCtrl)

	ServiceCategoryRouter.Routes(r)
	AdvertisementRouter.Routes(r)

	ginLambda = ginadapter.New(r)
}

func Handler(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return ginLambda.ProxyWithContext(ctx, req)
}
